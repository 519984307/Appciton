// 参考
// -----------------------------------------------------------------------------
// http://wiki.qt.io/Qt_Coding_Style
// http://blog.csdn.net/dbzhang800/article/details/6381636
// -----------------------------------------------------------------------------

// 缩进
// -----------------------------------------------------------------------------
// * 采用4个空格
// * 空格，不要用Tab
// -----------------------------------------------------------------------------

// 变量
// -----------------------------------------------------------------------------
// * 每行只声明一个变量
// * 尽可能避免短的或无意义的变量名
// * 单字符的变量只在临时变量或循环的计数中使用
// * 等到真正需要使用时再定义变量
// -----------------------------------------------------------------------------

// Wrong
int a, b;
char *c, *d;

// Correct
int height;
int width;
char *nameOfThis;
char *nameOfThat;

// -----------------------------------------------------------------------------
// * 变量和函数以小写字符开头，后续单词以大写字符开头
// * 避免使用缩写
// -----------------------------------------------------------------------------

// Wrong
short Cntr;
char ITEM_DELIM = '\t';

// Correct
short counter;
char itemDelimiter = '\t';

// -----------------------------------------------------------------------------
// * 类名总是以大写字符开头，公有类以大写字母‘Q’开始，后跟随一个大写字符（例如：QRgb），公有函数
//   通常以小写字母‘q’开始（例如：qRgb）
// * 首字母组合词（Acronyms）为驼峰式命名（camel-cased），例如 QXmlStreamReader，而不是
//   QXMLStreamReader。
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// * 建议：
//   1、类私有成员变量名以下划线开头，如 _id
//   2、如果参数名和成员变量名发生冲突，使用 "this->" 解决
//   3、避免使用 (意义不明确的字符)：
// -----------------------------------------------------------------------------

// Wrong
void MyClass::setColor(const QColor &c)
{
    color = c;
}

// Correct
void MyClass::setColor(const QColor &color)
{
    _color = color;
}

MyClass::MyClass(const QColor &color) : 
        _color(color)
{
}

// 空白
// -----------------------------------------------------------------------------
// * 利用空行将语句恰当地分组
// * 总是使用一个空行(不要空多行)
// * 总是在每个关键字后和大括号前使用一个空格
// -----------------------------------------------------------------------------

// Wrong
if(foo)
{
}

// Correct
if (foo)
{
}

// -----------------------------------------------------------------------------
// * 对指针和引用，在类型和*、&之间加一个空格，但在*、&与变量之间不加空格
// -----------------------------------------------------------------------------

// Correct
char *x;
const QString &myString;
const char * const y = "hello";

// -----------------------------------------------------------------------------
// * 二元操作符前后加空白（如 +、-、*、/、=）
// * 类型转换后不加空白
// * 尽量避免C风格的类型转换
// -----------------------------------------------------------------------------

// Wrong
char* blockOfMemory = (char*) malloc(data.size());

// Correct
char *blockOfMemory = reinterpret_cast<char *>(malloc(data.size()));

// -----------------------------------------------------------------------------
// * 不要在同一行上放置多条语句
// * 作为扩充，使用一个新行作为控制语句的主体
// -----------------------------------------------------------------------------

// Wrong
if (foo) bar();

// Correct
if (foo)
{
    bar();
}

// -----------------------------------------------------------------------------
// * 除了断行外，不要尝试用空白对齐一些东西
// -----------------------------------------------------------------------------

// Wrong
x = rect.x();
y = rect.y();
width = rect.width();
height = rect.height();

// 大括号
// -----------------------------------------------------------------------------
// * 基本原则：大括号单独一行
// -----------------------------------------------------------------------------

// Wrong
if (codec) { 

} else {  

}

// Correct
if (codec)
{
}
else
{
}

// -----------------------------------------------------------------------------
// * 例外：函数定义和类定义中，左大括号总是单独占一行
// -----------------------------------------------------------------------------

// Correct
static void foo(int g)
{
    qDebug("foo: %i", g);
}

class Moo
{
};

// -----------------------------------------------------------------------------
// * 控制语句的主体即使只有一行，也要使用大括号
// -----------------------------------------------------------------------------

// Wrong
if (address.isEmpty())
return false;

for (int i = 0; i < 10; ++i)
qDebug("%i", i);

// Correct
if (address.isEmpty())
{
    return false;
}

for (int i = 0; i < 10; ++i)
{
    qDebug("%i", i);
}

// -----------------------------------------------------------------------------
// * 如果控制语句的主体为空，则使用大括号
// -----------------------------------------------------------------------------

// Wrong
while (a);

// Correct
while (a)
{}

// 圆括号
// -----------------------------------------------------------------------------
// * 使用圆括号将表达式分组
// -----------------------------------------------------------------------------

// Wrong
if (a && b || c)

// Correct
if ((a && b) || c)

// Wrong
a + b & c

// Correct
(a + b) & c

// switch语句
// -----------------------------------------------------------------------------
// * switch语句主体以及case或default子句要有缩进
// * 每一个case必须有一个break或renturn语句，或者用注释说明无需break
// -----------------------------------------------------------------------------

// Correct
switch (myEnum)
{
    case Value1:
        doSomething();
        break;
        
    case Value2:
    case Value3:
        doSomethingElse();
    // fall through
    
    default:
        defaultHandling();
        break;
}

// 跳转语句（break、continue、return和goto）
// -----------------------------------------------------------------------------
// * 不要在跳转语句后面放置‘else’
// -----------------------------------------------------------------------------

// Wrong
if (thisOrThat)
{
    return;
}
else
{
    somethingElse();
}

// Correct
if (thisOrThat)
{
    return;
}

somethingElse();

// 断行
// -----------------------------------------------------------------------------
// * 保持每行短于100个字符，需要时进行断行
// * 逗号，操作符放一行的结束。
// -----------------------------------------------------------------------------

// Wrong
if (longExpression 
        + otherLongExpression 
        + otherOtherLongExpression)
{
}

// Correct
if (longExpression +
        otherLongExpression +
        otherOtherLongExpression)
{
}

// -----------------------------------------------------------------------------
// * 例外：如果使用 if 语句 和 && 或者 ||，对齐需要一点调整(否则控制语句和主体较难以分辨)，
//   对 while 或 else if，不存在这个问题。
// -----------------------------------------------------------------------------

// Wrong
if (test1
        && test2
        && test3)
{
    doSomeThing();
}

// Correct
if (test1
        && test2
        && test3)
{
    doSomeThing();
}

while (test1
        && test2
        && test3)
{
    doSomeThing();
}

// 继承与virtual
// -----------------------------------------------------------------------------
// * 重新实现一个虚函数时，头文件中不放置 virtual 关键字
// -----------------------------------------------------------------------------

// 补充建议
// -----------------------------------------------------------------------------
// * 每个类独占一对 *.cpp/*.h 文件，文件名与类名保持一致
// * 在类中必须以可访问权限逐次降低的顺序声明类的成员，顺序依次为: public、protect、private
// * 构造函数/析构函数的定义写在源文件的开头处
// * 访问器(getter)函数以get开头，设置器(setter)函数以set开头
// * 宏或者常量用大写字母和下划线组成
// * 每个函数都要有注释，无论该函数有多简单
// -----------------------------------------------------------------------------
