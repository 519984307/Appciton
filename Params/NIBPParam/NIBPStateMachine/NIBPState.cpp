/**
 ** This file is part of the nPM project.
 ** Copyright(C) Better Life Medical Technology Co., Ltd.
 ** All Rights Reserved.
 ** Unauthorized copying of this file, via any medium is strictly prohibited
 ** Proprietary and confidential
 **
 ** Written by ZhongHuan Duan duanzhonghuan@blmed.cn, 2018/10/12
 **/

#include "NIBPState.h"
#include "NIBPStateMachine.h"
#include <QTimerEvent>
#include <QVector>

/**************************************************************************************************
 * 设置超时并启动计时。
 *************************************************************************************************/
void NIBPState::setTimeOut(int timeOut)
{
    _actionTime->start(timeOut);
    _elapseTime.restart();
}

/**************************************************************************************************
 * 重新设置超时时限。
 *************************************************************************************************/
void NIBPState::resetTimeOut(int t)
{
    int remainTime = 0;
    remainTime = t- _elapseTime.elapsed();
    if (remainTime <= 0)
    {
        _actionTime->stop();
        _timeout();
    }
    else
    {
        _actionTime->start(t);
    }
}

/**************************************************************************************************
 * 停止定时其。
 *************************************************************************************************/
void NIBPState::timeStop()
{
    _actionTime->stop();
}

/**************************************************************************************************
 * 切换状态。
 *************************************************************************************************/
void NIBPState::switchState(unsigned char newStateID)
{
    // 切换状态时停止QTimer
    _actionTime->stop();

    if (_stateMachine == NULL)
    {
        return;
    }
    _stateMachine->switchToState(newStateID);
}

/**************************************************************************************************
 * 切换状态。
 *************************************************************************************************/
void NIBPState::switchState(unsigned char newStateID, void *arg)
{
    // 切换状态时停止QTimer
    _actionTime->stop();

    if (_stateMachine == NULL)
    {
        return;
    }
    _stateMachine->switchToState(newStateID, arg);
}

/**************************************************************************************************
 * 返回到状态机对象。
 *************************************************************************************************/
void NIBPState::returnToMachine(void)
{
    if (_stateMachine == NULL)
    {
        return;
    }
    _stateMachine->stateExit(_id);
}

/**************************************************************************************************
 * 返回到状态机对象。
 *************************************************************************************************/
void NIBPState::returnToMachine(void *arg)
{
    if (_stateMachine == NULL)
    {
        return;
    }
    _stateMachine->stateExit(_id, arg);
}

/**************************************************************************************************
 * 获取时间流逝
 *************************************************************************************************/
int NIBPState::elspseTime()
{
    return _elapseTime.elapsed();
}

/**************************************************************************************************
 * 超时。
 *************************************************************************************************/
void NIBPState::_timeout()
{
    _actionTime->stop();
    _stateMachine->handleNIBPEvent(NIBP_EVENT_TIMEOUT, NULL, 0);
}

/**************************************************************************************************
 * 设置关联的状态机。
 *************************************************************************************************/
void NIBPState::setStateMachine(NIBPStateMachine *machine)
{
    _stateMachine = machine;
}

/**************************************************************************************************
 * 获取关联的状态机。
 *************************************************************************************************/
NIBPStateMachine *NIBPState::getStateMachine(void)
{
    return _stateMachine;
}

/**************************************************************************************************
 * 获取状态的类型。
 *************************************************************************************************/
unsigned char NIBPState::getID(void) const
{
    return _id;
}

/**************************************************************************************************
 * 处理事件。
 *************************************************************************************************/
void NIBPState::handleNIBPEvent(NIBPEvent event, const unsigned char args[], int argLen)
{
    Q_UNUSED(event);
    Q_UNUSED(args);
    Q_UNUSED(argLen);
}

/**************************************************************************************************
 * 进入。
 *************************************************************************************************/
void NIBPState::enter(void)
{
}

/**************************************************************************************************
 * 进入。
 *************************************************************************************************/
void NIBPState::enter(void *arg)
{
    Q_UNUSED(arg);
}

/**************************************************************************************************
 * 退出。
 *************************************************************************************************/
void NIBPState::exit(void)
{
}

/***************************************************************************************************
 * state machine exit :
 **************************************************************************************************/
void NIBPState::stateMachineExit()
{
}

/**************************************************************************************************
 * 构造。
 *************************************************************************************************/
NIBPState::NIBPState(unsigned char id)
{
    _id = id;
    _stateMachine = NULL;

    _actionTime = new QTimer();
    connect(_actionTime, SIGNAL(timeout()), this, SLOT(_timeout()));
}

/**************************************************************************************************
 * 析构。
 *************************************************************************************************/
NIBPState::~NIBPState()
{
}
