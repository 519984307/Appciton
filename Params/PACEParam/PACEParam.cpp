#include "PACEParam.h"
#include "PACEProviderIFace.h"
#include "PACEWidget.h"
#include "IConfig.h"

PACEParam *PACEParam::_selfObj = NULL;

/**************************************************************************************************
 * pulse delivered.
 *************************************************************************************************/
void PACEParam::pulseDelivered(void)
{
    _paceWidget->pulseDelivered();
}

/**************************************************************************************************
 * 设置数据提供对象。
 *************************************************************************************************/
void PACEParam::setProvider(PACEProviderIFace *provider)
{
    _provider = provider;
}

/**************************************************************************************************
 * 设置界面对象。
 *************************************************************************************************/
void PACEParam::setWidget(PACEWidget *widget)
{
    _paceWidget = widget;
}

/**************************************************************************************************
 * 设置工作模式。
 *************************************************************************************************/
void PACEParam::setMode(PACEMode mode)
{
    primaryConfig.setNumValue("PACE|Options|Mode", (int)mode);
    _provider->setParameters(getMode(), getRate(), getCurrent());
}

/**************************************************************************************************
 * 获取工作模式。
 *************************************************************************************************/
PACEMode PACEParam::getMode(void)
{
    int mode = PACE_MODE_DEMAND;
    primaryConfig.getNumValue("PACE|Options|Mode", mode);
    return (PACEMode)mode;
}

/**************************************************************************************************
 * 设置输出频率。
 *************************************************************************************************/
void PACEParam::setRate(int rate)
{
    primaryConfig.setNumValue("PACE|Options|Rate", (int)rate);
    _provider->setParameters(getMode(), getRate(), getCurrent());
}

/**************************************************************************************************
 * 获取输出频率。
 *************************************************************************************************/
int PACEParam::getRate(void)
{
    int rate = 70;
    primaryConfig.getNumValue("PACE|Options|Rate", rate);
    return rate;
}

/**************************************************************************************************
 * 设置输出电流。
 *************************************************************************************************/
void PACEParam::setCurrent(int current)
{
    primaryConfig.setNumValue("PACE|Options|Current", (int)current);
    _provider->setParameters(getMode(), getRate(), getCurrent());
}

/**************************************************************************************************
 * 获取输出电流。
 *************************************************************************************************/
int PACEParam::getCurrent(void)
{
    int current = 0;
    primaryConfig.getNumValue("PACE|Options|Current", current);
    return current;
}

/**************************************************************************************************
 * 构造。
 *************************************************************************************************/
PACEParam::PACEParam() : Param(PARAM_PACE)
{
    _paceWidget = NULL;
    _provider = NULL;
}

/**************************************************************************************************
 * 析构。
 *************************************************************************************************/
PACEParam::~PACEParam()
{

}
